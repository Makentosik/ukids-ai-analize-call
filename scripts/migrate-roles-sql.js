const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function migrateUserRolesSql() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüìã –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:');
    const currentRoles = await prisma.$queryRaw`SELECT role, COUNT(*) as count FROM users GROUP BY role`;
    console.log(currentRoles);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏...');
    
    const adminUpdated = await prisma.$executeRaw`UPDATE users SET role = 'ADMINISTRATOR' WHERE role = 'ADMIN'`;
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ADMIN ‚Üí ADMINISTRATOR: ${adminUpdated} –∑–∞–ø–∏—Å–µ–π`);

    const managerUpdated = await prisma.$executeRaw`UPDATE users SET role = 'OCC_MANAGER' WHERE role = 'MANAGER'`;
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ MANAGER ‚Üí OCC_MANAGER: ${managerUpdated} –∑–∞–ø–∏—Å–µ–π`);

    const employeeUpdated = await prisma.$executeRaw`UPDATE users SET role = 'SUPERVISOR' WHERE role = 'EMPLOYEE'`;
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ EMPLOYEE ‚Üí SUPERVISOR: ${employeeUpdated} –∑–∞–ø–∏—Å–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –†–æ–ª–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    const finalRoles = await prisma.$queryRaw`SELECT role, COUNT(*) as count FROM users GROUP BY role`;
    console.log(finalRoles);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateUserRolesSql()
  .then(() => {
    console.log('\n‚ú® SQL –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• SQL –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
