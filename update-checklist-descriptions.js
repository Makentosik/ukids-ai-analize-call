const { PrismaClient } = require('@prisma/client');

async function updateChecklistDescriptions() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    const items = await prisma.checklistItem.findMany({
      orderBy: [
        { templateId: 'asc' },
        { orderIndex: 'asc' }
      ]
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –°–ª–æ–≤–∞—Ä—å –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const descriptions = {
      '–ü–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º': '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∂–ª–∏–≤–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ü—Ä–∏–º–µ—Ä—ã: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"',
      '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∏ –Ω–∞–∑–≤–∞–ª –∫–æ–º–ø–∞–Ω–∏—é': '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–≤–∞–ª —Å–≤–æ–µ –∏–º—è –∏ –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç. –ü—Ä–∏–º–µ—Ä: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –∏–∑ –ê–∫–∞–¥–µ–º–∏–∏ Ukids"',
      '–í—ã—è—Å–Ω–∏–ª –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç—É, –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏. –ü—Ä–∏–º–µ—Ä: "–°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É —Ä–µ–±—ë–Ω–∫–∞?"',
      '–ü—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É': '–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –æ–±—ä—è—Å–Ω–∏–ª –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
      '–û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞': '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∏ –ø–æ–ª–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –Ω–∏–æ–¥–Ω–æ–≥–æ –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è',
      '–î–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö': '–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–æ–∑–Ω–∞—á–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞, –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
      '–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∑–∞ –≤—Ä–µ–º—è': '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∂–ª–∏–≤–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –≤—Ä–µ–º—è, —É–¥–µ–ª—ë–Ω–Ω–æ–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—É, –∏ –∫—Ä–∞—Å–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É'
    };
    
    let updatedCount = 0;
    
    for (const item of items) {
      const description = descriptions[item.title];
      
      if (description && item.description !== description) {
        await prisma.checklistItem.update({
          where: { id: item.id },
          data: { description }
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: "${item.title}"`);
        updatedCount++;
      } else if (!description) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: "${item.title}"`);
      } else {
        console.log(`‚úì –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "${item.title}"`);
      }
    }
    
    console.log(`üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ ${items.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const updatedItems = await prisma.checklistItem.findMany({
      include: {
        template: true
      },
      orderBy: [
        { templateId: 'asc' },
        { orderIndex: 'asc' }
      ],
      take: 5
    });
    
    updatedItems.forEach((item, index) => {
      console.log(`${index + 1}. "${item.title}"`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description ? item.description.substring(0, 80) + '...' : '–ù–ï–¢'}`);
      console.log(`   –®–∞–±–ª–æ–Ω: ${item.template.title}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateChecklistDescriptions();
