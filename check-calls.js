const { PrismaClient } = require('@prisma/client');

async function checkCalls() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤–æ–Ω–∫–∏ –≤ –±–∞–∑–µ...');
    
    const calls = await prisma.call.findMany({
      include: {
        reviews: {
          include: {
            template: true,
            requestedBy: true,
          }
        }
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: ${calls.length}`);
    
    calls.forEach((call, index) => {
      console.log(`\nüìû –ó–≤–æ–Ω–æ–∫ ${index + 1}:`);
      console.log(`   ID: ${call.id}`);
      console.log(`   Deal ID: ${call.dealId}`);
      console.log(`   Employee: ${call.employeeName}`);
      console.log(`   Manager: ${call.managerName}`);
      console.log(`   Created: ${call.createdAt}`);
      console.log(`   Call Text: ${call.callText ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
      console.log(`   Reviews: ${call.reviews.length}`);
      
      call.reviews.forEach((review, reviewIndex) => {
        console.log(`     üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ ${reviewIndex + 1}:`);
        console.log(`        ID: ${review.id}`);
        console.log(`        Status: ${review.status}`);
        console.log(`        Template: ${review.template.title}`);
        console.log(`        Requested by: ${review.requestedBy ? review.requestedBy.name : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è'}`);
        console.log(`        Comment: ${review.commentText || '–ù–µ—Ç'}`);
        console.log(`        Analysis Results: ${review.analysisResults ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
        console.log(`        Created: ${review.createdAt}`);
        console.log(`        Completed: ${review.completedAt || '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCalls();
