const { PrismaClient } = require('@prisma/client');

async function checkStructure() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ChecklistItem...');
    
    const item = await prisma.checklistItem.findFirst({
      include: {
        template: true
      }
    });
    
    if (item) {
      console.log('üìã –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ChecklistItem:');
      console.log(`   ID: ${item.id}`);
      console.log(`   Title: ${item.title}`);
      console.log(`   Description: ${item.description || '–ù–ï–¢ –ü–û–õ–Ø description!'}`);
      console.log(`   OrderIndex: ${item.orderIndex}`);
      console.log(`   Template: ${item.template.title}`);
    } else {
      console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã ChecklistItem –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const allItems = await prisma.checklistItem.findMany({
      select: {
        id: true,
        title: true,
        description: true,
        orderIndex: true
      },
      take: 3
    });
    
    console.log(`\nüìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${allItems.length}`);
    allItems.forEach((item, index) => {
      console.log(`   ${index + 1}. "${item.title}" - –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–ï–¢'}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.message.includes('description')) {
      console.log('üö® –ü–æ–ª–µ description –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    }
  } finally {
    await prisma.$disconnect();
  }
}

checkStructure();
