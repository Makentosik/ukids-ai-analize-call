import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requirePermission, canViewCall } from '@/lib/rbac';
import { createCallReviewSchema, sendToN8nSchema } from '@/lib/validations';
import { UserRole, ReviewStatus } from '@prisma/client';

interface RouteParams {
  params: { id: string };
}

export async function POST(request: NextRequest, { params }: RouteParams) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ n8n
    const { user } = await requirePermission('canSendToN8n');
    console.log('üîç DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ requirePermission:', JSON.stringify({ id: user?.id, name: user?.name, role: user?.role }, null, 2));
    const { id: callId } = await params;

    if (!callId) {
      return NextResponse.json({ error: 'ID –∑–≤–æ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    let body;
    try {
      body = await request.json();
      console.log('üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ /api/calls/[id]/send:', JSON.stringify(body, null, 2));
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }
    const validationResult = createCallReviewSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
          details: validationResult.error.errors
        },
        { status: 400 }
      );
    }

    const { templateId, commentText } = validationResult.data;

    // –ü–æ–ª—É—á–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const call = await prisma.call.findUnique({
      where: { id: callId },
    });

    if (!call) {
      return NextResponse.json({ error: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (!canViewCall(user.role as UserRole, user.name, call.employeeName)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const checklist = await prisma.checklistTemplate.findUnique({
      where: { id: templateId },
      include: {
        items: {
          orderBy: {
            orderIndex: 'asc',
          },
        },
      },
    });

    if (!checklist) {
      return NextResponse.json({ error: '–ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (!checklist.isActive) {
      return NextResponse.json({ error: '–ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    let requestedById = null;
    if (user?.id) {
      const existingUser = await prisma.user.findUnique({ where: { id: user.id } });
      if (existingUser) {
        requestedById = user.id;
      } else {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID', user.id, '–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.');
        // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É 401, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ requestedById
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    const review = await prisma.callReview.create({
      data: {
        callId,
        templateId,
        requestedById,
        commentText,
        status: ReviewStatus.PENDING,
      },
    });

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n
      const n8nPayload = {
        id: call.id,
        text: call.callText || commentText || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∑–≤–æ–Ω–∫–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        checklist: checklist.items.map(item => ({
          title: item.title,
          description: item.description || null,
          evaluationType: item.evaluationType, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏
        })),
        reviewId: review.id, // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–æ–≤–µ—Ä–∫–∏
      };

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const payloadValidation = sendToN8nSchema.safeParse(n8nPayload);
      if (!payloadValidation.success) {
        throw new Error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è payload –¥–ª—è n8n');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n (–ø—Ä–æ–¥–∞–∫—à–Ω endpoint)
      const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || 'https://miquenaluekos.beget.app/webhook-test/callai';

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:', n8nPayload);

      const n8nResponse = await fetch(n8nWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'CallAI-App-Manual/2.0',
        },
        body: JSON.stringify(n8nPayload),
      });

      const responseText = await n8nResponse.text();
      let responseJson;
      
      try {
        responseJson = JSON.parse(responseText);
      } catch {
        responseJson = { rawResponse: responseText };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ n8n
      const updatedReview = await prisma.callReview.update({
        where: { id: review.id },
        data: {
          status: n8nResponse.ok ? ReviewStatus.SUCCESS : ReviewStatus.FAILED,
          n8nResponse: {
            status: n8nResponse.status,
            statusText: n8nResponse.statusText,
            headers: Object.fromEntries(n8nResponse.headers.entries()),
            body: responseJson,
            timestamp: new Date().toISOString(),
          },
        },
        include: {
          template: {
            select: {
              title: true,
            },
          },
        },
      });

      if (n8nResponse.ok) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ n8n –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
        return NextResponse.json({
          success: true,
          message: '–ß–µ–∫-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ n8n',
          review: updatedReview,
          n8nResponse: responseJson,
        });
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ n8n –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}:`, n8nResponse.status, responseText);
        return NextResponse.json(
          {
            success: false,
            message: `–û—à–∏–±–∫–∞ n8n: ${n8nResponse.status} ${n8nResponse.statusText}`,
            review: updatedReview,
            n8nResponse: responseJson,
          },
          { status: 422 }
        );
      }

    } catch (n8nError: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n:', n8nError);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ FAILED
      const failedReview = await prisma.callReview.update({
        where: { id: review.id },
        data: {
          status: ReviewStatus.FAILED,
          n8nResponse: {
            error: n8nError.message,
            timestamp: new Date().toISOString(),
          },
        },
        include: {
          template: {
            select: {
              title: true,
            },
          },
        },
      });

      return NextResponse.json(
        {
          success: false,
          message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n: ${n8nError.message}`,
          review: failedReview,
        },
        { status: 500 }
      );
    }

  } catch (error: any) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);

    if (error.message === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    if (error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤') {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
