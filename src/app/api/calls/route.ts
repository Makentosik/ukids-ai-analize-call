import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAuth, createCallsFilter } from '@/lib/rbac';
import { callsSearchSchema, parseDateString } from '@/lib/validations';
import { UserRole } from '@prisma/client';

export async function GET(request: NextRequest) {
  try {
    const { user } = await requireAuth();
    const { searchParams } = new URL(request.url);

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = {
      search: searchParams.get('search') || undefined,
      dateFrom: searchParams.get('dateFrom') || undefined,
      dateTo: searchParams.get('dateTo') || undefined,
      page: searchParams.get('page') || '1',
      limit: searchParams.get('limit') || '20',
      sortBy: searchParams.get('sortBy') || 'createdAt',
      sortOrder: searchParams.get('sortOrder') || 'desc',
    };

    const validationResult = callsSearchSchema.safeParse(params);
    if (!validationResult.success) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞', details: validationResult.error.errors },
        { status: 400 }
      );
    }

    const { search, dateFrom, dateTo, page, limit, sortBy, sortOrder } = validationResult.data;

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    const baseFilter = createCallsFilter(user.role as UserRole, user.name);

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ WHERE —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const whereCondition: any = { ...baseFilter };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (–¥–ª—è SQLite —É–±–∏—Ä–∞–µ–º mode: 'insensitive')
    if (search) {
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω—É:', search);
      whereCondition.OR = [
        { id: { contains: search } },
        { dealId: { contains: search } },
        { employeeName: { contains: search } },
        { managerName: { contains: search } },
      ];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    const dateFilter: any = {};
    if (dateFrom) {
      const fromDate = parseDateString(dateFrom);
      if (fromDate) {
        dateFilter.gte = fromDate;
      }
    }
    if (dateTo) {
      const toDate = parseDateString(dateTo);
      if (toDate) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        toDate.setDate(toDate.getDate() + 1);
        dateFilter.lt = toDate;
      }
    }
    if (Object.keys(dateFilter).length > 0) {
      whereCondition.createdAt = dateFilter;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const orderBy: any = {};
    orderBy[sortBy] = sortOrder;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const skip = (page - 1) * limit;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [calls, totalCount] = await Promise.all([
      prisma.call.findMany({
        where: whereCondition,
        include: {
          reviews: {
            include: {
              template: {
                select: {
                  title: true,
                },
              },
              requestedBy: {
                select: {
                  name: true,
                },
              },
            },
            orderBy: {
              createdAt: 'desc',
            },
          },
        },
        orderBy,
        skip,
        take: limit,
      }),
      prisma.call.count({
        where: whereCondition,
      }),
    ]);

    // –õ–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${calls.length} –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ ${totalCount} –æ–±—â–∏—Ö`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalPages = Math.ceil(totalCount / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    return NextResponse.json({
      calls,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages,
        hasNextPage,
        hasPrevPage,
      },
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤:', error);

    if (error.message === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const { user } = await requireAuth();
    
    if (!user) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    let body;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { id, dealId, createdAt, employeeName, managerName, initiatedBy, callText, payload } = body;
    
    if (!id || !dealId || !createdAt || !employeeName || !managerName) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
    const call = await prisma.call.create({
      data: {
        id,
        dealId,
        createdAt: new Date(createdAt),
        employeeName,
        managerName,
        initiatedBy: initiatedBy ? String(initiatedBy) : null,
        callText: callText ? String(callText) : null,
        payload: payload || {},
      },
      include: {
        reviews: {
          include: {
            template: {
              select: {
                title: true,
              },
            },
          },
        },
      },
    });

    return NextResponse.json(call, { status: 201 });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∑–≤–æ–Ω–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (error.code === 'P2002') {
      return NextResponse.json(
        { error: '–ó–≤–æ–Ω–æ–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      );
    }
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
