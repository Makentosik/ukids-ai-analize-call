import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requirePermission } from '@/lib/rbac';
import { UserRole } from '@prisma/client';

export async function POST(request: NextRequest) {
  try {
    // –¢—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    const { user } = await requirePermission('canDeleteCalls');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É
    if (user.role !== UserRole.ADMINISTRATOR) {
      return NextResponse.json(
        { error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤' },
        { status: 403 }
      );
    }
    
    let body;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }

    const { confirmation } = body;

    // –¢—Ä–µ–±—É–µ–º —è–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (confirmation !== 'DELETE_ALL_CALLS') {
      return NextResponse.json(
        { 
          error: '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å confirmation: "DELETE_ALL_CALLS"',
          hint: '–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞ –∏ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–≤–æ–Ω–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const callsCount = await prisma.call.count();
    const reviewsCount = await prisma.callReview.count();

    if (callsCount === 0) {
      return NextResponse.json({
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞',
        deletedCalls: 0,
        deletedReviews: 0
      });
    }

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (prisma) => {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const deletedReviews = await prisma.callReview.deleteMany({});
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–≤–æ–Ω–∫–∏
      const deletedCalls = await prisma.call.deleteMany({});

      return {
        deletedCallsCount: deletedCalls.count,
        deletedReviewsCount: deletedReviews.count
      };
    });

    console.log(`üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: —É–¥–∞–ª–µ–Ω–æ ${result.deletedCallsCount} –∑–≤–æ–Ω–∫–æ–≤ –∏ ${result.deletedReviewsCount} –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.name}`);

    return NextResponse.json({
      message: 'üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞',
      deletedCalls: result.deletedCallsCount,
      deletedReviews: result.deletedReviewsCount,
      clearedBy: user.name,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);

    if (error.message === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    if (error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤') {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message },
      { status: 500 }
    );
  }
}
