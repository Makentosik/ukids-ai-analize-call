import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { ReviewStatus } from '@prisma/client';

// POST /api/incoming-call/results
// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç n8n –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç CallReview –∑–∞–ø–∏—Å—å, –∑–∞—Ç–µ–º —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π webhook
export async function POST(request: NextRequest) {
  try {
    let body: any;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }

    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç n8n:', body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const { reviewId, analysisResults, status } = body || {};
    
    if (!reviewId) {
      return NextResponse.json({ error: 'reviewId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    if (!analysisResults) {
      return NextResponse.json({ error: 'analysisResults –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 });
    }

    // –ù–∞—Ö–æ–¥–∏–º CallReview –∑–∞–ø–∏—Å—å
    const review = await prisma.callReview.findUnique({
      where: { id: reviewId },
      include: { call: true, template: true },
    });

    if (!review) {
      return NextResponse.json({ error: '–ó–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º CallReview —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    const updatedReview = await prisma.callReview.update({
      where: { id: reviewId },
      data: {
        status: status === 'success' ? ReviewStatus.SUCCESS : ReviewStatus.FAILED,
        analysisResults: analysisResults,
        completedAt: new Date(),
        n8nResponse: {
          ...review.n8nResponse,
          analysisCompleted: true,
          timestamp: new Date().toISOString(),
        },
      },
      include: {
        call: true,
        template: { include: { items: true } },
      },
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è review:', reviewId);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π webhook –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    try {
      const notifyUrl = 'https://miquenaluekos.beget.app/webhook/callai';
      const notificationPayload = {
        type: 'analysis_completed',
        callId: updatedReview.call.id,
        reviewId: updatedReview.id,
        status: updatedReview.status,
        analysisResults: updatedReview.analysisResults,
        call: {
          id: updatedReview.call.id,
          dealId: updatedReview.call.dealId,
          employeeName: updatedReview.call.employeeName,
          managerName: updatedReview.call.managerName,
          createdAt: updatedReview.call.createdAt,
          payload: updatedReview.call.payload,
        },
        template: {
          title: updatedReview.template.title,
          items: updatedReview.template.items.map(item => ({
            title: item.title,
            description: item.description,
            evaluationType: String(item.evaluationType), // –ü—Ä–∏–≤–æ–¥–∏–º enum –∫ —Å—Ç—Ä–æ–∫–µ
            orderIndex: item.orderIndex,
          })),
        },
        completedAt: updatedReview.completedAt,
      };

      const notifyResponse = await fetch(notifyUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(notificationPayload),
      });

      console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π webhook:', notifyResponse.status);
      
      if (!notifyResponse.ok) {
        console.warn('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', await notifyResponse.text());
      }
    } catch (notifyErr) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π webhook:', notifyErr);
    }

    return NextResponse.json({ 
      success: true, 
      review: updatedReview,
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
    });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error);
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      details: error.message 
    }, { status: 500 });
  }
}
