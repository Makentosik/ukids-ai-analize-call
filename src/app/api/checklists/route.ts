import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAuth, requirePermission } from '@/lib/rbac';

export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏
    const { user } = await requirePermission('canManageChecklists');
    
    const { searchParams } = new URL(request.url);
    const activeOnly = searchParams.get('active') === 'true';

    // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const whereClause = activeOnly ? { isActive: true } : {};
    
    const checklists = await prisma.checklistTemplate.findMany({
      where: whereClause,
      include: {
        items: {
          orderBy: {
            orderIndex: 'asc',
          },
        },
        createdBy: {
          select: {
            name: true,
          },
        },
        _count: {
          select: {
            items: true,
            reviews: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(checklists);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤:', error);

    if (error.message === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    if (error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤') {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏
    const { requirePermission } = await import('@/lib/rbac');
    const { user } = await requirePermission('canManageChecklists');

    let body;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞:', JSON.stringify(body, null, 2));
    
    const { createChecklistSchema } = await import('@/lib/validations');
    const validationResult = createChecklistSchema.safeParse(body);
    
    if (!validationResult.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞:');
      console.error('Error details:', validationResult.error);
      console.error('Error issues:', validationResult.error.issues);
      return NextResponse.json(
        { 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
          details: validationResult.error.issues,
          receivedData: body
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', validationResult.data);

    const { name, description, isActive, items } = validationResult.data;

    // –°–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const checklist = await prisma.checklistTemplate.create({
      data: {
        title: name, // Map name to title for the database
        description,
        isActive,
        createdById: user.id,
        items: {
          create: items.map(item => ({
            title: item.text, // Map text to title for database
            description: item.description || '',
            orderIndex: item.orderIndex,
            evaluationType: item.evaluationType || 'SCALE_1_10',
          })),
        },
      },
      include: {
        items: {
          orderBy: {
            orderIndex: 'asc',
          },
        },
        createdBy: {
          select: {
            name: true,
          },
        },
      },
    });

    return NextResponse.json(checklist, { status: 201 });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞:', error);

    if (error.message === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    if (error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤') {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
