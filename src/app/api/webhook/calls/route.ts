import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { ReviewStatus, UserRole } from '@prisma/client';
import { sendAutoWebhook } from '@/lib/webhook-sender';
import { parseRussianDate } from '@/lib/utils';

// Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è n8n
export async function POST(request: NextRequest) {
  console.log('üî¥ [WEBHOOK-DEBUG] POST request received at /api/webhook/calls (v2 - with Russian date parsing)');
  console.log('üî¥ [WEBHOOK-DEBUG] Request URL:', request.url);
  console.log('üî¥ [WEBHOOK-DEBUG] Request headers:', Object.fromEntries(request.headers.entries()));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const authHeader = request.headers.get('authorization');
    const expectedToken = process.env.N8N_WEBHOOK_SECRET;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if (expectedToken && process.env.NODE_ENV === 'production' && authHeader !== `Bearer ${expectedToken}`) {
      return NextResponse.json(
        { error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø' },
        { status: 401 }
      );
    }

    let body;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }
    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç n8n:', body);
    console.log('üìÖ createdAt –∏–∑ n8n:', body.createdAt, '(—Ç–∏–ø:', typeof body.createdAt, ')');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { 
      id, 
      dealId, 
      createdAt, 
      employeeName, 
      managerName, 
      initiatedBy,
      callText,
      ...otherFields 
    } = body;
    
    // –°–æ–∑–¥–∞–µ–º payload –∏–∑ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const payload = {
      ...otherFields,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      duration: body.duration || otherFields.duration,
      phoneNumber: body.phoneNumber || otherFields.phoneNumber,
      callType: body.callType || otherFields.callType,
      notes: body.notes || otherFields.notes
    };
    
    console.log('üì¶ Payload –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', payload);
    
    if (!id || !dealId || !employeeName || !managerName) {
      return NextResponse.json(
        { 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
          required: ['id', 'dealId', 'employeeName', 'managerName']
        },
        { status: 400 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    let finalDate: Date;
    if (createdAt) {
      const parsedDate = parseRussianDate(createdAt);
      if (parsedDate) {
        finalDate = parsedDate;
        console.log('‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç:', createdAt, '->', finalDate.toISOString());
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', createdAt);
        finalDate = new Date();
      }
    } else {
      console.log('üï∞Ô∏è –î–∞—Ç–∞ createdAt –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è');
      finalDate = new Date();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
    if (isNaN(finalDate.getTime())) {
      console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:', {
        original: createdAt,
        parsed: finalDate,
        timestamp: finalDate.getTime()
      });
      
      return NextResponse.json(
        { 
          error: '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
          details: `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: "${createdAt}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM –∏–ª–∏ ISO 8601`
        },
        { status: 400 }
      );
    }
    
    console.log('üï∞Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø—Ä–æ–π–¥–µ–Ω–∞:', {
      original: createdAt,
      parsed: finalDate,
      isValid: !isNaN(finalDate.getTime()),
      timestamp: finalDate.getTime(),
      isoString: finalDate.toISOString()
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
    const call = await prisma.call.create({
      data: {
        id: String(id),
        dealId: String(dealId),
        createdAt: finalDate,
        employeeName: String(employeeName),
        managerName: String(managerName),
        initiatedBy: initiatedBy ? String(initiatedBy) : null,
        callText: callText ? String(callText) : null,
        payload: payload,
      },
      include: {
        reviews: {
          include: {
            template: {
              select: {
                title: true,
              },
            },
          },
        },
      },
    });

    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ webhook:', call.id);
    console.log('üìù callText:', callText ? `"${callText.substring(0, 50)}..."` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('üìÖ –ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –≤ –±–∞–∑–µ:', call.createdAt);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const userAgent = request.headers.get('user-agent') || '';
    const isFromCallAI = userAgent.includes('CallAI-App');
    
    if (!isFromCallAI) {
      console.log('üöÄ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
      
      // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      let systemUser = await prisma.user.findFirst({
        where: { email: 'system@callai.local' }
      });
      
      if (!systemUser) {
        console.log('üìù –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
        systemUser = await prisma.user.create({
          data: {
            email: 'system@callai.local',
            name: '–°–∏—Å—Ç–µ–º–∞ CallAI',
            passwordHash: 'system_user_no_login',
            role: UserRole.ADMINISTRATOR,
          }
        });
      }
      
      try {
        const autoResult = await sendAutoWebhook(call.id, systemUser.id);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', autoResult);
      } catch (autoError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', autoError);
      }
    } else {
      console.log('üìù –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω –æ—Ç CallAI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ç–ª–∏');
    }
    
    return NextResponse.json({ 
      success: true, 
      call,
      message: '–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
    }, { status: 201 });
    
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ webhook:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∑–≤–æ–Ω–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (error.code === 'P2002') {
      return NextResponse.json(
        { 
          error: '–ó–≤–æ–Ω–æ–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          code: 'DUPLICATE_ID'
        },
        { status: 409 }
      );
    }
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
