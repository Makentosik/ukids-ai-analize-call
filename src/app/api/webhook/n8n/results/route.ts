import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { n8nResultsSchema } from '@/lib/validations';
import { ReviewStatus } from '@prisma/client';

// Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç n8n
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const authHeader = request.headers.get('authorization');
    const expectedToken = process.env.N8N_WEBHOOK_SECRET;
    
    if (expectedToken && authHeader !== `Bearer ${expectedToken}`) {
      return NextResponse.json(
        { error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø' },
        { status: 401 }
      );
    }

    let body;
    try {
      body = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }

    console.log('–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç n8n:', JSON.stringify(body, null, 2));
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤
    const results = Array.isArray(body) ? body : [body];
    
    const updatedReviews = [];
    
    for (const result of results) {
      console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç n8n:', JSON.stringify(result, null, 2));
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = n8nResultsSchema.safeParse(result);
      
      if (!validationResult.success) {
        console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', validationResult.error);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      }

      const { id, reviewId, ok, checklist, triggers, recommendations, stats, markdown, original } = validationResult.data;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º callId - –±–µ—Ä–µ–º –∏–∑ id –∏–ª–∏ original.id
      const callId = id || original?.id;
      
      if (!callId) {
        console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–≤–æ–Ω–∫–∞ –Ω–∏ –≤ id, –Ω–∏ –≤ original.id');
        continue;
      }
      
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}, reviewId: ${reviewId}`);
      
      // –ò—â–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ reviewId –∏–ª–∏ –ø–æ callId
      let review;
      
      if (reviewId) {
        // –ò—â–µ–º –ø–æ ID –ø—Ä–æ–≤–µ—Ä–∫–∏
        review = await prisma.callReview.findUnique({
          where: { id: reviewId },
          include: {
            call: true,
            template: true,
          },
        });
      } else {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        review = await prisma.callReview.findFirst({
          where: {
            callId: callId,
            status: { in: [ReviewStatus.PENDING, ReviewStatus.SENT, ReviewStatus.SUCCESS] },
          },
          include: {
            call: true,
            template: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
        });
      }
      
      if (!review) {
        console.warn(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è callId: ${callId}, reviewId: ${reviewId}`);
        continue;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ original.results, –µ—Å–ª–∏ stats –Ω–µ —É–∫–∞–∑–∞–Ω—ã
      let finalStats = stats;
      if ((!stats || stats.total === 0) && original?.results) {
        const results = original.results;
        finalStats = {
          total: results.length,
          done: results.filter(r => r.done === true).length,
          notDone: results.filter(r => r.done === false).length,
          unknown: results.filter(r => r.done === undefined || r.done === null).length,
        };
        console.log(`–í—ã—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ original.results:`, finalStats);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      const updatedReview = await prisma.callReview.update({
        where: { id: review.id },
        data: {
          status: ok ? ReviewStatus.SUCCESS : ReviewStatus.FAILED,
          analysisResults: {
            ok,
            checklist: checklist || [],
            triggers: triggers || [],
            recommendations: recommendations || [],
            stats: finalStats || { total: 0, done: 0, notDone: 0, unknown: 0 },
            markdown: markdown || '',
            original: original || null,
            processedAt: new Date().toISOString(),
          },
          completedAt: new Date(),
        },
        include: {
          call: true,
          template: true,
        },
      });
      
      updatedReviews.push(updatedReview);
      
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ${review.id} (–∑–≤–æ–Ω–æ–∫ ${review.callId})`);
    }
    
    return NextResponse.json({ 
      success: true, 
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${updatedReviews.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞`,
      processedReviews: updatedReviews.length,
    }, { status: 200 });
    
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç n8n:', error);
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
