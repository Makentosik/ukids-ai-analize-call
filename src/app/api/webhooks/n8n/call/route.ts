import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { n8nCallWebhookSchema, parseDateString } from '@/lib/validations';
import { toastMessages } from '@/lib/locale';

export async function POST(request: NextRequest) {
  console.log('üîµ [N8N-WEBHOOK-DEBUG] POST request received at /api/webhooks/n8n/call');
  console.log('üîµ [N8N-WEBHOOK-DEBUG] Request URL:', request.url);
  console.log('üîµ [N8N-WEBHOOK-DEBUG] Request headers:', Object.fromEntries(request.headers.entries()));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const n8nToken = process.env.N8N_TOKEN;
    if (n8nToken) {
      const authHeader = request.headers.get('authorization');
      const providedToken = authHeader?.replace('Bearer ', '');
      
      if (providedToken !== n8nToken) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π N8N —Ç–æ–∫–µ–Ω');
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
    }

    // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let rawBody;
    try {
      rawBody = await request.json();
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const validationResult = n8nCallWebhookSchema.safeParse(rawBody);
    if (!validationResult.success) {
      console.error('–í–∞–ª–∏–¥–∞—Ü–∏—è webhook –Ω–µ –ø—Ä–æ—à–ª–∞:', validationResult.error);
      return NextResponse.json(
        { 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
          details: validationResult.error.errors
        },
        { status: 400 }
      );
    }

    const { id, deal_id, created_at, employe, employe_rug, initiated_by, call_text } = validationResult.data;

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const createdAtDate = parseDateString(created_at) || new Date();

    try {
      // Upsert –∑–≤–æ–Ω–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const call = await prisma.call.upsert({
        where: { id },
        update: {
          dealId: deal_id,
          createdAt: createdAtDate,
          employeeName: employe,
          managerName: employe_rug,
          initiatedBy: initiated_by,
          callText: call_text,
          payload: rawBody, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –∏—Å—Ö–æ–¥–Ω—ã–π JSON
        },
        create: {
          id,
          dealId: deal_id,
          createdAt: createdAtDate,
          employeeName: employe,
          managerName: employe_rug,
          initiatedBy: initiated_by,
          callText: call_text,
          payload: rawBody, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –∏—Å—Ö–æ–¥–Ω—ã–π JSON
        },
      });

      console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ ${id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω`);
      
      return NextResponse.json({ 
        ok: true, 
        message: '–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        callId: call.id
      });

    } catch (dbError: any) {
      console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', dbError);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ö–æ—Ç—è –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º upsert)
      if (dbError.code === 'P2002') {
        return NextResponse.json(
          { error: '–ó–≤–æ–Ω–æ–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 409 }
        );
      }
      
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö' },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–±–ª–µ–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    if (error instanceof SyntaxError) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ POST –∑–∞–ø—Ä–æ—Å—ã
export async function GET() {
  return NextResponse.json(
    { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' },
    { status: 405 }
  );
}

export async function PUT() {
  return NextResponse.json(
    { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' },
    { status: 405 }
  );
}

export async function DELETE() {
  return NextResponse.json(
    { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' },
    { status: 405 }
  );
}
