'use client';

import { useState } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Trash2, Loader2, CheckSquare, Square } from 'lucide-react';
import { toast } from 'sonner';

type Call = {
  id: string;
  dealId: string;
  employeeName: string;
  managerName: string;
  createdAt: string;
  reviews: Array<{
    id: string;
    status: string;
  }>;
};

type BulkDeleteCallsProps = {
  calls: Call[];
  onDeleteSuccess?: () => void;
};

export function BulkDeleteCalls({ calls, onDeleteSuccess }: BulkDeleteCallsProps) {
  const { data: session } = useSession();
  const [selectedCalls, setSelectedCalls] = useState<Set<string>>(new Set());
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isClearAllDialogOpen, setIsClearAllDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  const canDelete = session?.user?.role === 'ADMINISTRATOR' || session?.user?.role === 'OCC_MANAGER';
  const isAdmin = session?.user?.role === 'ADMINISTRATOR';

  if (!canDelete) {
    return null;
  }

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedCalls(new Set(calls.map(call => call.id)));
    } else {
      setSelectedCalls(new Set());
    }
  };

  const handleSelectCall = (callId: string, checked: boolean) => {
    const newSelected = new Set(selectedCalls);
    if (checked) {
      newSelected.add(callId);
    } else {
      newSelected.delete(callId);
    }
    setSelectedCalls(newSelected);
  };

  const handleBulkDelete = async () => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/calls/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callIds: Array.from(selectedCalls)
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏');
      }

      const result = await response.json();
      
      toast.success(result.message);
      setSelectedCalls(new Set());
      
      if (onDeleteSuccess) {
        onDeleteSuccess();
      }
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–∫–∏');
    } finally {
      setIsLoading(false);
      setIsDeleteDialogOpen(false);
    }
  };

  const handleClearAll = async () => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/calls/clear-all', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          confirmation: 'DELETE_ALL_CALLS'
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã');
      }

      const result = await response.json();
      
      toast.success(result.message);
      setSelectedCalls(new Set());
      
      if (onDeleteSuccess) {
        onDeleteSuccess();
      }
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsLoading(false);
      setIsClearAllDialogOpen(false);
    }
  };

  const selectedCount = selectedCalls.size;
  const allSelected = selectedCount === calls.length && calls.length > 0;
  const someSelected = selectedCount > 0 && selectedCount < calls.length;

  return (
    <>
      <div className="flex items-center gap-4 py-4 border-b">
        <div className="flex items-center gap-2">
          <Checkbox
            checked={allSelected}
            indeterminate={someSelected}
            onCheckedChange={handleSelectAll}
            disabled={calls.length === 0}
          />
          <span className="text-sm text-gray-600">
            {selectedCount > 0 ? `–í—ã–±—Ä–∞–Ω–æ: ${selectedCount}` : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'}
          </span>
        </div>

        {selectedCount > 0 && (
          <Button
            variant="destructive"
            size="sm"
            onClick={() => setIsDeleteDialogOpen(true)}
            disabled={isLoading}
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Trash2 className="h-4 w-4 mr-2" />
            )}
            –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedCount})
          </Button>
        )}

        {isAdmin && calls.length > 0 && (
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsClearAllDialogOpen(true)}
            disabled={isLoading}
            className="ml-auto text-red-600 hover:text-red-700 border-red-200 hover:border-red-300"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É
          </Button>
        )}
      </div>

      {/* –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ */}
      {calls.length > 0 && (
        <div className="hidden">
          {/* –≠—Ç–æ—Ç div —Å–∫—Ä—ã—Ç, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CallActions */}
          {calls.map(call => (
            <Checkbox
              key={call.id}
              checked={selectedCalls.has(call.id)}
              onCheckedChange={(checked) => handleSelectCall(call.id, !!checked)}
            />
          ))}
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤</AlertDialogTitle>
            <AlertDialogDescription className="space-y-2">
              <p>
                –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å <strong>{selectedCount}</strong> –∑–≤–æ–Ω–∫–æ–≤.
              </p>
              <p className="text-amber-600">
                ‚ö†Ô∏è –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
              </p>
              <ul className="list-disc list-inside text-sm space-y-1">
                <li>–î–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</li>
                <li>–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</li>
              </ul>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isLoading}>
              –û—Ç–º–µ–Ω–∞
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleBulkDelete}
              disabled={isLoading}
              className="bg-red-600 hover:bg-red-700 focus:ring-red-600"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –£–¥–∞–ª–µ–Ω–∏–µ...
                </>
              ) : (
                `–£–¥–∞–ª–∏—Ç—å ${selectedCount} –∑–≤–æ–Ω–∫–æ–≤`
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ */}
      <AlertDialog open={isClearAllDialogOpen} onOpenChange={setIsClearAllDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</AlertDialogTitle>
            <AlertDialogDescription className="space-y-3">
              <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                <p className="font-semibold text-red-800">
                  ‚ö†Ô∏è –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø ‚ö†Ô∏è
                </p>
                <p className="text-red-700">
                  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å <strong>–í–°–ï</strong> –∑–≤–æ–Ω–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
                </p>
              </div>
              <p>–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:</p>
              <ul className="list-disc list-inside text-sm space-y-1">
                <li>–í—Å–µ {calls.length} –∑–≤–æ–Ω–∫–æ–≤</li>
                <li>–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                <li>–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤</li>
                <li>–í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</li>
              </ul>
              <p className="font-semibold text-red-600">
                –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ù–ï–û–ë–†–ê–¢–ò–ú–ê!
              </p>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isLoading}>
              –û—Ç–º–µ–Ω–∞
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleClearAll}
              disabled={isLoading}
              className="bg-red-600 hover:bg-red-700 focus:ring-red-600"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –û—á–∏—Å—Ç–∫–∞...
                </>
              ) : (
                'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É'
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
