import { prisma } from '@/lib/prisma';
import { ReviewStatus } from '@prisma/client';
import { sendToN8nSchema } from '@/lib/validations';

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
 * @param callId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–≤–æ–Ω–æ–∫ (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ review)
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendAutoWebhook(callId: string, userId: string) {
  console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ webhook –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–≤–æ–Ω–æ–∫
    const call = await prisma.call.findUnique({
      where: { id: callId },
    });

    if (!call) {
      throw new Error(`–ó–≤–æ–Ω–æ–∫ ${callId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
    let checklist = await prisma.checklistTemplate.findFirst({
      where: { 
        isDefault: true,
        isActive: true 
      },
      include: {
        items: {
          orderBy: {
            orderIndex: 'asc',
          },
        },
      },
    });
    
    // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π
    if (!checklist) {
      console.warn('‚ö†Ô∏è –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º fallback...');
      
      checklist = await prisma.checklistTemplate.findFirst({
        where: { isActive: true },
        include: {
          items: {
            orderBy: {
              orderIndex: 'asc',
            },
          },
        },
        orderBy: { createdAt: 'asc' },
      });
    }

    if (!checklist) {
      throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
    
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–∫-–ª–∏—Å—Ç: "${checklist.title}" (ID: ${checklist.id}, isDefault: ${checklist.isDefault}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${checklist.items.length})`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    const review = await prisma.callReview.create({
      data: {
        callId,
        templateId: checklist.id,
        requestedById: userId,
        commentText: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞',
        status: ReviewStatus.PENDING,
      },
    });
    
    console.log(`üìù –°–æ–∑–¥–∞–Ω review ID: ${review.id} –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n
    const n8nPayload = {
      id: call.id,
      text: call.callText || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      checklist: checklist.items.map((item, index) => ({
        title: `${index + 1}.${item.title}`,
        description: item.description || null,
        evaluationType: String(item.evaluationType), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏
      })),
      reviewId: review.id, // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    };

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const payloadValidation = sendToN8nSchema.safeParse(n8nPayload);
    if (!payloadValidation.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ payload:', payloadValidation.error);
      throw new Error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è payload –¥–ª—è n8n');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n
    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || 'https://miquenaluekos.beget.app/webhook/callai';

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook –≤ n8n –Ω–∞ URL: ${n8nWebhookUrl}`);  
    console.log('üìã Payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(n8nPayload, null, 2));

    const n8nResponse = await fetch(n8nWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'CallAI-App-Auto/3.0',
      },
      body: JSON.stringify(n8nPayload),
    });

    const responseText = await n8nResponse.text();
    let responseJson;
    
    try {
      responseJson = JSON.parse(responseText);
    } catch {
      responseJson = { rawResponse: responseText };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ n8n
    const updatedReview = await prisma.callReview.update({
      where: { id: review.id },
      data: {
        status: n8nResponse.ok ? ReviewStatus.SUCCESS : ReviewStatus.FAILED,
        n8nResponse: {
          status: n8nResponse.status,
          statusText: n8nResponse.statusText,
          headers: Object.fromEntries(n8nResponse.headers.entries()),
          body: responseJson,
          timestamp: new Date().toISOString(),
        },
      },
    });

    if (n8nResponse.ok) {
      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId} –Ω–∞ URL: ${n8nWebhookUrl}`);
      console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç n8n (${n8nResponse.status}):`, responseJson);
      return {
        success: true,
        reviewId: review.id,
        n8nResponse: responseJson,
      };
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ webhook –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId} –Ω–∞ URL: ${n8nWebhookUrl}:`, n8nResponse.status, responseText);
      return {
        success: false,
        reviewId: review.id,
        error: `N8n –æ—à–∏–±–∫–∞: ${n8nResponse.status} ${n8nResponse.statusText}`,
        n8nResponse: responseJson,
      };
    }

  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ webhook –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}:`, error);
    
    return {
      success: false,
      error: error.message,
    };
  }
}
